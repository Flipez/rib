#!/usr/bin/ruby
# coding: utf-8
#
# Ruby IRC bot
#
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details. 

require File.expand_path('../lib/irc.rb', __FILE__)
require File.expand_path('../lib/myfuncs.rb', __FILE__)
require 'logger'
require 'optparse'

conf = readconf("config")

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  opts.on("-i", "--irc [HOSTNAME]", "IRC Server to connect to") do |irc|
    conf["irc"] = irc
  end
  opts.on("-n", "--nick [NICKNAME]", "nickname for the bot") do |n|
    conf["nick"] = n
  end
  opts.on("-c", "--channel [CHANNEL]", String, "which channel to join") do |c|
    c.gsub!(/\A([^\#].*)/, '#\0')
    conf["channel"] = c
  end
  opts.on("-f", "--file [CONFFILE]", "read configuration from this file") do |f|
    conf = readconf(f)
  end
  opts.on("-d", "--[no-]daemon", "run as daemon") do |d|
    conf["daemon"] = d
  end
  # No argument, shows at tail.  This will print an options summary.
  # Try it and see!
  opts.on_tail("-h", "--help", "show this message") do
    puts opts
    exit
  end
end.parse!

["irc", "channel", "nick"].each do |t|
  if conf[t].nil? or conf[t].empty?
    puts "No #{t} specified!", "Type #{File.basename($0)} -h for help"
    exit
  end
end

# Logfile for the Programm. NOT IRC log! Look into lib/irc.rb therefore.
logfile = File.expand_path("../log/#{File.basename($0)}_#{conf["irc"]}_#{conf["channel"]}.log", __FILE__)
log = Logger.new(logfile)
log.level = Logger::INFO

# Start IRC Connection
begin
  log.info("Server starts")
  server = IRC::Connection.new(conf["irc"], conf["channel"])
  server.login(conf["nick"], "hostname", "servername", "\"#{conf["nick"]}\" Rigged Bot")
  log.info(server.auth_nick(conf["auth"], conf["nick"]))
  server.join_channel
  log.info("Connected to #{conf["irc"]} as #{conf["nick"]} in #{conf["channel"]}")
  $Starttime = Time.new

  # Daemonizing
  if RUBY_VERSION > '1.9'
    if conf["daemon"] == true
      puts "Connection established!\nDaemonizing now!"
      Process.daemon()
      log.info("Running as daemon now!")
    end
  end

  # After successful connection start with server response loop.
  while cmd = server.recv
    begin

      # If a message is received check for triggers and response properly.
      if cmd.command == "PRIVMSG"
        output = nil
        case cmd.last_param 
        # several triggers and their response algorithms
        when /\A#{conf["tc"]}(.*)\Z/ then output = trigger($1, conf, server, log)
        when /(http[s]?:\/\/)(\S*)/x then output = ftitle($&) if conf["title"] == true
        when /([p][o][n]{1,2}[yi][e]?s*)/i then output = "#{$1} yay." if conf["pony"] == true && rand(2).zero?
        end # case

        # If useful response message was created: send it!
        next if output.nil?
        output = output.scan(/.+/)
        output.each {|o| server.privmsg(conf["channel"], o)}
      end # if cmd.command
    rescue
      log.error($!)
    end # begin
  end # while

rescue
  log.fatal($!)
ensure
  log.info("EXITING")
  log.close
end # begin
